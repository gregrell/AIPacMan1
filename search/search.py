# search.py
# ---------
# Licensing Information:  You are free to use or extend these projects for
# educational purposes provided that (1) you do not distribute or publish
# solutions, (2) you retain this notice, and (3) you provide clear
# attribution to UC Berkeley, including a link to http://ai.berkeley.edu.
# 
# Attribution Information: The Pacman AI projects were developed at UC Berkeley.
# The core projects and autograders were primarily created by John DeNero
# (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# Student side autograding was added by Brad Miller, Nick Hay, and
# Pieter Abbeel (pabbeel@cs.berkeley.edu).


"""
In search.py, you will implement generic search algorithms which are called by
Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem.
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state.
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples, (successor,
        action, stepCost), where 'successor' is a successor to the current
        state, 'action' is the action required to get there, and 'stepCost' is
        the incremental cost of expanding to that successor.
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.
        The sequence must be composed of legal moves.
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other maze, the
    sequence of moves will be incorrect, so only use this for tinyMaze.
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST

    return  [s, s, w, s, w, w, s, w]
    """return [w,w,w,w,s,n,s,n,s,s,n,n,s,s,n,n,s,n,s,n,e,w,e,w,e,w,e,w,e,e,e,e,e,e,e]"""

# This class generated by Greg Rell for use in further searching algorithms
class State:
    def __init__(self,coords,remainingGoals):
        self.coords=coords
        self.remainingGoals=remainingGoals

    def getRemainingGoals(self):
        return self.remainingGoals
    def getCoords(self):
        return self.coords


class Node:

    def __init__(self,state,parent,path,cost):
        self.state=state
        self.parent=parent
        self.path=path
        self.cost=cost
        self.f=None
        self.h=None

    def __str__(self):
        return str(self.state)
    def __repr__(self):
        return str(self.state)



    def setState(self,x):
            self.state=x
    def getState(self):
        return self.state
    def setParent(self,x):
        self.parent=x
    def getParent(self):
        return self.parent
    def setPath(self,x):
        self.path=x
    def getPath(self):
        return self.path
    def appendPath(self,x):
        self.path.append(x)
    def getCost(self):
        return self.cost
    def setCost(self,cost):
        self.cost=cost
    def getTotalCost(self):
        node=self
        total=0
        while not node == None:
            try:
                total=total+self.getCost()
                node=node.getParent()
            except AttributeError:
                #print "get total cost exception"
                break
        return total
    def getTotalPath(self):
        node=self
        path = []
        while not node == None:
            try:
                path.append(node.getPath())
                node = node.getParent()
            except AttributeError:
                #print "path generation exception"
                break
        path.reverse()
        return path

    def setF(self,f):
        self.f=f
    def getF(self):
        return self.h+self.cost

    def setH(self,h):
        self.h=h
    def getH(self):
        return self.h














def depthFirstSearch(problem):

    """
    Search the deepest nodes in the search tree first.

    Your search algorithm needs to return a list of actions that reaches the
    goal. Make sure to implement a graph search algorithm.

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:"""


    print "Start:", problem.getStartState()
    #print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    #print "Start's successors:", problem.getSuccessors(problem.getStartState())
    #print "Next's successors:", problem.getSuccessors((5,4))
    #print problem

    "*** YOUR CODE HERE ***"
    #DFS
    #Uses class Node from above. Depth First Seach algorithm - when goal is found it is appended to a nodebin list. The path is re-constructed from the goal back
    #through all parent nodes to the origin.

    start=Node(problem.getStartState(),None,['Begin'],0)

    #Recursive DFS implemented
    def DFS(p,root):
        S = []
        Q = util.Stack()
        S.append(root.getState())
        Q.push(root)
        while not Q.isEmpty():
            current = Q.pop()
            S.append(current.getState())

            #print "popped node was ", current.getState()
            path = current.getPath()
            if p.isGoalState(current.getState()):
                #print "goal state popped ", current.getState(), " its parent is ", current.getParent().getState()
                return current
            successors=p.getSuccessors(current.getState())
            #successors=list(reversed(successors))
            #print "the successors are ", successors

            #print "the reversed successors are ", successors


            for x in successors:
                if x[0] not in S:
                    TmpPath = path[:]
                    TmpPath.append(x[1])
                    TmpNode = Node(x[0], current, TmpPath, 0)
                    #print "pushing onto stack ",TmpNode.getState()
                    Q.push(TmpNode)

    node=DFS(problem,start)
    path=node.getPath()
    #path.reverse()
    #print "the path is", path
    return path[1:]



def breadthFirstSearch(problem):
    """Search the shallowest nodes in the search tree first."""
    "*** YOUR CODE HERE ***"

    """
   
    start=Node(problem.getStartState(),None,['Begin'],0)

    #I implemented the non-recursive BFS algorithm that uses a set and a queue.

    def BFS(p,root):
        S=[]
        Q=util.Queue()
        S.append(root.getState())
        Q.push(root)
        while not Q.isEmpty():
            current=Q.pop()
            S.append(current.getState())
            path=current.getPath()
            if p.isGoalState(current.getState()):
                print "goal state found at ",current.getState()
                return current
            for x in p.getSuccessors(current.getState()):
                if x[0] not in S:
                    TmpPath=path[:]
                    TmpPath.append(x[1])
                    TmpNode = Node(x[0], current, TmpPath, 0)
                    Q.push(TmpNode)

    node=BFS(problem,start)
    path=node.getPath()
    return path[1:]
    """
    print "Start:", problem.getStartState()
    start=Node(problem.getStartState(),None,['Begin'],0)
    def BFS(p,root):
        S = []
        Q = util.Queue()
        S.append(root.getState())
        Q.push(root)
        while not Q.isEmpty():
            current = Q.pop()

            #print "popped node was ", current.getState()
            path = current.getPath()
            if p.isGoalState(current.getState()):
                #print "goal state popped ", current.getState(), " its parent is ", current.getParent().getState()
                return current

            successors=p.getSuccessors(current.getState())
            successors=list(reversed(successors))
            #print "the successors are ", successors

            #print "the reversed successors are ", successors
            for x in successors:
                if x[0] not in S:
                    TmpPath = path[:]
                    TmpPath.append(x[1])
                    TmpNode = Node(x[0], current, TmpPath, 0)
                    #print "pushing onto queue ",TmpNode.getState(), "when the discovered is ",S
                    S.append(TmpNode.getState())
                    Q.push(TmpNode)

    node=BFS(problem,start)
    path=node.getPath()
    #path.reverse()
    #print "the path is", path
    return path[1:]








def uniformCostSearch(problem):
    """Search the node of least total cost first."""
    "*** YOUR CODE HERE ***"
    #Uniform cost search algorithm implemented as in https://www.ics.uci.edu/~rickl/courses/cs-171/cs171-lecture-slides/cs-171-03-UninformedSearch.pdf
    #Priority Queue used from util.py
    start = Node(problem.getStartState(), None, ['Begin'], 0)

    def UCS(p, root):
        S = []
        Q = util.PriorityQueue()
        S.append(root.getState())
        Q.push(root,1)
        while not Q.isEmpty():
            #print "current heap is ", Q.heap

            current = Q.pop()


            #print "popped node was ", current, "with cost ", current.getCost()
            #print "heap is ",Q.heap

            #tmpList=Q.heap
            #for tupple in tmpList:
                #print "tupple is ",tupple[2]


            path = current.getPath()
            if p.isGoalState(current.getState()):
                # print "goal state popped ", current.getState(), " its parent is ", current.getParent().getState()
                return current

            successors = p.getSuccessors(current.getState())
            #successors = list(reversed(successors))
            # print "the successors are ", successors

            # print "the reversed successors are ", successors


            for x in successors:
                TmpPath = path[:]
                TmpPath.append(x[1])
                TmpNode = Node(x[0], current, TmpPath,current.getCost()+x[2])
                if x[0] not in S:
                    #print "pushing onto queue ",TmpNode.getState(), "with cost",TmpNode.getCost()
                    S.append(TmpNode.getState())
                    Q.push(TmpNode,TmpNode.getCost())
                else:
                    updateHeap(Q,TmpNode)

    def updateHeap(priorityQueue,node):
        heap=priorityQueue.heap
        for tup in heap:
            #print "comparing ",str(node.getState())," vs tup ",str(tup[2])
            nodeString=str(node.getState())
            tupString=str(tup[2])

            nodeObject=tup[2]
            if nodeString==tupString and node.getCost() < nodeObject.getCost():
                nodeObject.setCost(node.getCost())
                nodeObject.setParent(node.getParent())
                nodeObject.setPath(node.getPath())
                #print "Node ",node.getState()," with cost ", node.getCost()," found in tupple ",tup,
                #print "the type of object obtained from tup[2] is ", type(nodeObject)
                priorityQueue.update(nodeObject,node.getCost())
                #print "updated heap is ", heap

    node = UCS(problem, start)
    path = node.getPath()
    # path.reverse()
    # print "the path is", path
    return path[1:]


def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    """Search the node that has the lowest combined cost and heuristic first."""
    "*** YOUR CODE HERE ***"
    start = Node(problem.getStartState(), None, ['Begin'], 0)

    def astar(p, root):
        S = []
        Q = util.PriorityQueue()
        S.append(root.getState())
        Q.push(root, 1)
        while not Q.isEmpty():
            # print "current heap is ", Q.heap

            current = Q.pop()

            # print "popped node was ", current, "with cost ", current.getCost()
            # print "heap is ",Q.heap

            # tmpList=Q.heap
            # for tupple in tmpList:
            # print "tupple is ",tupple[2]


            path = current.getPath()
            if p.isGoalState(current.getState()):
                # print "goal state popped ", current.getState(), " its parent is ", current.getParent().getState()
                return current

            successors = p.getSuccessors(current.getState())
            # successors = list(reversed(successors))
            # print "the successors are ", successors

            # print "the reversed successors are ", successors


            for x in successors:
                TmpPath = path[:]
                TmpPath.append(x[1])
                TmpNode = Node(x[0], current, TmpPath, current.getCost() + x[2])
                TmpNode.setH(heuristic(x[0],p))
                if x[0] not in S:
                    #print "pushing onto queue ",TmpNode.getState(), "with cost",TmpNode.getCost()," its heuristic is ",TmpNode.getH()," the F value is ",TmpNode.getF()
                    S.append(TmpNode.getState())
                    Q.push(TmpNode, TmpNode.getF())
                else:
                    updateHeap(Q, TmpNode)

    def updateHeap(priorityQueue, node):
        heap = priorityQueue.heap
        for tup in heap:
            # print "comparing ",str(node.getState())," vs tup ",str(tup[2])
            nodeString = str(node.getState())
            tupString = str(tup[2])

            nodeObject = tup[2]
            if nodeString == tupString and node.getCost() < nodeObject.getCost():
                nodeObject.setCost(node.getCost())
                nodeObject.setParent(node.getParent())
                nodeObject.setPath(node.getPath())
                # print "Node ",node.getState()," with cost ", node.getCost()," found in tupple ",tup,
                # print "the type of object obtained from tup[2] is ", type(nodeObject)
                priorityQueue.update(nodeObject, node.getCost())
                # print "updated heap is ", heap

    node = astar(problem, start)
    path = node.getPath()
    # path.reverse()
    # print "the path is", path
    return path[1:]


"""  
   
    #Modelled with reference to http://web.mit.edu/eranki/www/tutorials/search/
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    e = Directions.EAST
    n = Directions.NORTH
    start = Node(problem.getStartState(), 0, 'Begin', 0)




    closedSet=[]
    openSet=[]
    start.setF(0)
    openSet.append(start)
    iteration=0
    goalN=None
    found=False



    while len(openSet)>0 and found==False:
        iteration+=1

        leastVal=float("inf")
        q=None
        for x in openSet:
            if x.getF()<leastVal:
                q=x
        theQ=q
        openSet.remove(q)

        successors=problem.getSuccessors(theQ.getState())
        sNodes=[]
        for y in successors:
            tmpNode=Node(y[0],theQ,y[1],theQ.getCost()+y[2])
            tmpNode.setH(heuristic(tmpNode.getState(),problem))
            sNodes.append(tmpNode)

        for z in sNodes:
            flagged=False
            if problem.isGoalState(z.getState()):
                print "found goal state", z.getState()
                goalN=z
                found=True

            for other in openSet:
                if other.getState()==z.getState():
                    #print "matched other in open set ",other.getState()," at cost ",other.getF(),"with Z ",z.getState()," at cost ",z.getF()
                    if other.getF()<z.getF():
                        #openSet.append(z)
                        flagged=True

            for other in closedSet:
                if other.getState()==z.getState():
                    #print "matched other in closed set ",other.getState()," at cost ",other.getF(),"with Z ",z.getState()," at cost ",z.getF()

                    if other.getF()<z.getF():
                        #openSet.append(z)
                        flagged=True

            if  flagged==False:
                openSet.append(z)
        #print "open Set Length: ",len(openSet), "closed Set Length: ", len(closedSet)
        closedSet.append(theQ)





    directions = []
    for x in goalN.getTotalPath():
        if x == 'East':
            directions.append(e)
        if x == 'West':
            directions.append(w)
        if x == 'North':
            directions.append(n)
        if x == 'South':
            directions.append(s)

    return directions
"""








# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
